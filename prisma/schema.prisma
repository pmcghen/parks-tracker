// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  displayFirstName  String?
  displayLastName   String?
  location          String?
  bio               String?
  Park_ParksVisited Park[]  @relation("ParksVisited")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Park {
  id                         String       @id @default(uuid())
  npsId                      String
  description                String
  designation                String
  directionsInfo             String
  directionsUrl              String
  fullName                   String
  latitude                   String
  longitude                  String
  states                     String
  url                        String
  weatherInfo                String
  User_ParksVisited          User[]       @relation("ParksVisited")
  Topic_ParksWithTopic       Topic[]      @relation("ParksWithTopic")
  Activity_ParksWithActivity Activity[]   @relation("ParksWithActivity")
  Contact                    Contact[]
  Address                    Address[]
  Campground                 Campground[]
}

model Topic {
  id                  String @id @default(uuid())
  npsId               String @unique
  name                String
  Park_ParksWithTopic Park[] @relation("ParksWithTopic")
}

model Activity {
  id                     String @id @default(uuid())
  npsId                  String @unique
  name                   String
  Park_ParksWithActivity Park[] @relation("ParksWithActivity")
}

model Fee {
  id                         String    @id @default(uuid())
  cost                       String
  description                String
  endDate                    EndDate   @relation(fields: [endDateId], references: [id])
  entranceFeeType            String
  exceptions                 String
  informationUrl             String
  payGovPurchaseUrl          String
  paymentDescription         String
  purchaseUrl                String
  recGovPurchaseUrl          String
  startDate                  StartDate @relation(fields: [startDateId], references: [id])
  timedEntryLocation         String
  timedEntryShortDescription String
  endDateId                  String
  startDateId                String
}

model StartDate {
  id      String @id @default(uuid())
  day     Int
  holiday String
  month   Int
  Fee     Fee[]
}

model EndDate {
  id      String @id @default(uuid())
  day     Int
  holiday String
  month   Int
  Fee     Fee[]
}

model Contact {
  id               String      @id @default(uuid())
  emailAddress     String
  emailDescription String
  phoneNumber      String
  phoneDescription String
  phoneExtension   String
  phoneType        String
  park             Park        @relation(fields: [parkId], references: [id])
  parkId           String
  Campground       Campground? @relation(fields: [campgroundId], references: [id])
  campgroundId     String?
}

model Address {
  id                    String      @id @default(uuid())
  city                  String
  countryCode           String
  line1                 String
  line2                 String
  line3                 String
  postalCode            String
  provinceTerritoryCode String
  type                  String
  park                  Park        @relation(fields: [parkId], references: [id])
  parkId                String
  Campground            Campground? @relation(fields: [campgroundId], references: [id])
  campgroundId          String?
}

model Campground {
  id                          String    @id @default(uuid())
  description                 String
  directionsOverview          String
  directionsUrl               String
  geometryPoiId               String
  npsId                       String
  lastIndexedDate             String
  latitude                    String
  longitude                   String
  name                        String
  park                        Park      @relation(fields: [parkId], references: [id])
  parkId                      String
  regulationsOverview         String
  fees                        String[]
  regulationsUrl              String
  reservationsDescription     String
  reservationsSitesFirstCome  String
  reservationsSitesReservable String
  reservationsUrl             String
  weatherOverview             String
  contacts                    Contact[]
  addresses                   Address[]
  // Accessibility
  adaInfo                     String
  wheelchairAccess            String
  internetInfo                String
  rvAllowed                   String
  rvMaxLength                 String
  rvInfo                      String
  trailerAllowed              String
  trailerMaxLength            String
  cellphoneInfo               String
  fireStovePolicy             String
  additionalInfo              String
  accessRoads                 String[]
  classifications             String[]
  // Amenities
  trashRecyclingCollection    String
  toilets                     String[]
  internetConnectivity        String
  showers                     String[]
  cellphoneReception          String
  laundry                     String
  amphitheather               String
  dumpStation                 String
  campStore                   String
  staffOrVolunteerHostOnsite  String
  potableWater                String[]
  iceAvailable                String
  firewoodForSale             String
  ampitheather                String
  foodStorageLockers          String
}
